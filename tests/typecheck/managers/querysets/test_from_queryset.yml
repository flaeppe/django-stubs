-   case: from_queryset_with_base_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.filter(id=1).queryset_method()) # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.filter(id=1)) # N: Revealed type is "myapp.models.ModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'
                NewManager = BaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_queryset_imported_from_other_module
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.queryset_method_2())  # N: Revealed type is "typing.Iterable[myapp.querysets.Custom]"
        reveal_type(MyModel.objects.queryset_method_3())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.queryset_method_4([]))  # N: Revealed type is "None"
        reveal_type(MyModel.objects.filter(id=1).queryset_method()) # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.filter(id=1)) # N: Revealed type is "myapp.querysets.ModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/querysets.py
            content: |
                from typing import TYPE_CHECKING, Iterable, Sequence
                from django.db import models
                if TYPE_CHECKING:
                    from .models import MyModel

                class Custom:
                    ...

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    def queryset_method(self) -> "ModelQuerySet":
                        return self.filter()

                    def queryset_method_2(self) -> Iterable[Custom]:
                        return []

                    def queryset_method_3(self) -> str:
                        return 'hello'

                    def queryset_method_4(self, arg: Sequence) -> None:
                        return None

        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager
                from .querysets import ModelQuerySet

                NewManager = BaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_generated_manager_imported_from_other_module
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.querysets.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.queryset_method_2())  # N: Revealed type is "typing.Iterable[myapp.querysets.Custom]"
        reveal_type(MyModel.objects.queryset_method_3())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.queryset_method_4([]))  # N: Revealed type is "None"
        reveal_type(MyModel.objects.filter(id=1).queryset_method()) # N: Revealed type is "myapp.querysets.ModelQuerySet"
        reveal_type(MyModel.objects.filter(id=1)) # N: Revealed type is "myapp.querysets.ModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/querysets.py
            content: |
                from typing import TYPE_CHECKING, Iterable, Sequence
                from django.db import models
                from django.db.models.manager import BaseManager
                if TYPE_CHECKING:
                    from .models import MyModel

                class Custom:
                    ...

                class ModelQuerySet(models.QuerySet["MyModel"]):
                    def queryset_method(self) -> "ModelQuerySet":
                        return self.filter()

                    def queryset_method_2(self) -> Iterable[Custom]:
                        return []

                    def queryset_method_3(self) -> str:
                        return 'hello'

                    def queryset_method_4(self, arg: Sequence) -> None:
                        return None

                NewManager = BaseManager.from_queryset(ModelQuerySet)

        -   path: myapp/models.py
            content: |
                from django.db import models
                from .querysets import NewManager

                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_annotates_manager_variable_as_type
    main: |
        from myapp.models import NewManager
        reveal_type(NewManager)  # N: Revealed type is "Type[myapp.models.ManagerFromModelQuerySet[Any]]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    ...

                NewManager = models.Manager.from_queryset(ModelQuerySet)

-   case: from_queryset_with_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_returns_intersection_of_manager_and_queryset
    main: |
        from myapp.models import MyModel, NewManager
        reveal_type(NewManager())  # N: Revealed type is "myapp.models.ModelBaseManagerFromModelQuerySet"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ModelBaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_with_class_name_provided
    main: |
        from myapp.models import MyModel, NewManager, OtherModel, OtherManager
        reveal_type(NewManager())  # N: Revealed type is "myapp.models.NewManager"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.NewManager[myapp.models.MyModel]"
        reveal_type(MyModel.objects.get())  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is "builtins.int"
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(OtherManager())  # N: Revealed type is "myapp.models.X"
        reveal_type(OtherModel.objects)  # N: Revealed type is "myapp.models.X[myapp.models.OtherModel]"
        reveal_type(OtherModel.objects.manager_only_method())  # N: Revealed type is "builtins.int"
        reveal_type(OtherModel.objects.manager_and_queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet, class_name='NewManager')
                class MyModel(models.Model):
                    objects = NewManager()

                OtherManager = ModelBaseManager.from_queryset(ModelQuerySet, class_name='X')
                class OtherModel(models.Model):
                    objects = OtherManager()

-   case: from_queryset_with_class_inheritance
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager
              class BaseQuerySet(models.QuerySet):
                  def queryset_method(self) -> str:
                      return 'hello'
              class ModelQuerySet(BaseQuerySet):
                  pass

              NewManager = BaseManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  objects = NewManager()

-   case: from_queryset_with_manager_in_another_directory_and_imports
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.managers.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel().objects.queryset_method)  # N: Revealed type is "def (param: Union[builtins.str, None] =) -> Union[builtins.str, None]"
        reveal_type(MyModel().objects.queryset_method('str'))  # N: Revealed type is "Union[builtins.str, None]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager

                class MyModel(models.Model):
                    objects = NewManager()
        -   path: myapp/managers.py
            content: |
                from typing import Optional
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self, param: Optional[str] = None) -> Optional[str]:
                        return param

                NewManager = models.Manager.from_queryset(ModelQuerySet)

-   case: from_queryset_with_inherited_manager_and_typing_no_return
    disable_cache: true
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.managers.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.get())  # N: Revealed type is "myapp.models.MyModel"
        reveal_type(MyModel().objects.base_queryset_method)  # N: Revealed type is "def (param: Union[builtins.int, builtins.str]) -> <nothing>"
        reveal_type(MyModel().objects.base_queryset_method(2))  # N: Revealed type is "<nothing>"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager
                class MyModel(models.Model):
                    objects = NewManager()
        -   path: myapp/managers.py
            content: |
                from django.db import models
                from myapp.base_queryset import BaseQuerySet
                class ModelQuerySet(BaseQuerySet):
                    pass
                NewManager = models.Manager.from_queryset(ModelQuerySet)
        -   path: myapp/base_queryset.py
            content: |
                from typing import NoReturn, Union
                from django.db import models
                class BaseQuerySet(models.QuerySet):
                    def base_queryset_method(self, param: Union[int, str]) -> NoReturn:
                        raise ValueError

-   case: from_queryset_with_decorated_queryset_methods
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel.objects.queryset_method_2())  # N: Revealed type is "builtins.int"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models, transaction

                class ModelQuerySet(models.QuerySet):
                    @transaction.atomic
                    def queryset_method(self) -> str:
                        return 'hello'

                    @transaction.atomic
                    @transaction.atomic
                    def queryset_method_2(self) -> int:
                        return 2

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_model_gets_generated_manager_as_default_manager
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.queryset_method())  # N: Revealed type is "builtins.str"
        reveal_type(MyModel._default_manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewManager = models.Manager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_can_resolve_explicit_any_methods
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.MyManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.queryset_method(1))  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.queryset_method)  # N: Revealed type is "def (qarg: Any) -> Any"
        reveal_type(MyModel.objects.manager_method(2))  # N: Revealed type is "Any"
        reveal_type(MyModel.objects.manager_method)  # N: Revealed type is "def (marg: Any) -> Any"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from typing import Any

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self, qarg: Any) -> Any:
                        return 'hello'

                class MyManager(models.Manager):
                    def manager_method(self, marg: Any) -> Any:
                        return 'hello'

                NewManager = MyManager.from_queryset(ModelQuerySet)
                class MyModel(models.Model):
                    objects = NewManager()

-   case: from_queryset_in_model_class_body_yields_message
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.base_manager)  # N: Revealed type is "myapp.models.BaseManagerFromMyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerFromMyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.custom_manager)  # N: Revealed type is "myapp.models.MyManagerFromMyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager

                class MyQuerySet(models.QuerySet["MyModel"]):
                    def queryset_method(self) -> int:
                        return 1

                class MyManager(BaseManager):
                    ...

                BaseManagerFromMyQuerySet = BaseManager.from_queryset(MyQuerySet)
                ManagerFromMyQuerySet = models.Manager.from_queryset(MyQuerySet)
                MyManagerFromMyQuerySet = MyManager.from_queryset(MyQuerySet)
                class MyModel(models.Model):
                    objects1 = BaseManager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    objects2 = BaseManager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects3 = models.Manager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    objects4 = models.Manager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects5 = MyManager.from_queryset(MyQuerySet)  # E: `.from_queryset` called from inside model class body
                    objects6 = MyManager.from_queryset(MyQuerySet)()  # E: `.from_queryset` called from inside model class body
                    # Initiating the manager type is fine
                    base_manager = BaseManagerFromMyQuerySet()
                    manager = ManagerFromMyQuerySet()
                    custom_manager = MyManagerFromMyQuerySet()

-   case: from_queryset_includes_methods_returning_queryset
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel.objects.alias)  # N: Revealed type is "def (*args: Any, **kwargs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.all)  # N: Revealed type is "def () -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.annotate)  # N: Revealed type is "def (*args: Any, **kwargs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.complex_filter)  # N: Revealed type is "def (filter_obj: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.defer)  # N: Revealed type is "def (*fields: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.difference)  # N: Revealed type is "def (*other_qs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.distinct)  # N: Revealed type is "def (*field_names: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.exclude)  # N: Revealed type is "def (*args: Any, **kwargs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.extra)  # N: Revealed type is "def (select: Union[builtins.dict[builtins.str, Any], None] =, where: Union[builtins.list[builtins.str], None] =, params: Union[builtins.list[Any], None] =, tables: Union[builtins.list[builtins.str], None] =, order_by: Union[typing.Sequence[builtins.str], None] =, select_params: Union[typing.Sequence[Any], None] =) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.filter)  # N: Revealed type is "def (*args: Any, **kwargs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.intersection)  # N: Revealed type is "def (*other_qs: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.none)  # N: Revealed type is "def () -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.only)  # N: Revealed type is "def (*fields: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.order_by)  # N: Revealed type is "def (*field_names: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.prefetch_related)  # N: Revealed type is "def (*lookups: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.reverse)  # N: Revealed type is "def () -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.select_for_update)  # N: Revealed type is "def (nowait: builtins.bool =, skip_locked: builtins.bool =, of: typing.Sequence[builtins.str] =, no_key: builtins.bool =) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.select_related)  # N: Revealed type is "def (*fields: Any) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.union)  # N: Revealed type is "def (*other_qs: Any, *, all: builtins.bool =) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.objects.using)  # N: Revealed type is "def (alias: Union[builtins.str, None]) -> myapp.models.MyQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager

                class MyQuerySet(models.QuerySet["MyModel"]):
                    ...

                MyManager = BaseManager.from_queryset(MyQuerySet)
                class MyModel(models.Model):
                    objects = MyManager()

# This tests a regression where mypy would generate phantom warnings about
# undefined types due to unresolved types when copying methods from QuerySet to
# a manager dynamically created using Manager.from_queryset().
#
# For details see: https://github.com/typeddjango/django-stubs/issues/1022
-   case: from_queryset_custom_auth_user_model
    # Cache needs to be disabled to consistenly reproduce the bug
    disable_cache: true
    main: |
        from users.models import User
    custom_settings: |
        AUTH_USER_MODEL = "users.User"
        INSTALLED_APPS = ("django.contrib.auth", "django.contrib.contenttypes", "users")
    files:
        -   path: users/__init__.py
        -   path: users/models.py
            content: |
                from django.contrib.auth.models import AbstractBaseUser
                from django.db import models

                from .querysets import UserQuerySet

                UserManager = models.Manager.from_queryset(UserQuerySet)

                class User(AbstractBaseUser):
                    email = models.EmailField(unique=True)
                    objects = UserManager()
                    USERNAME_FIELD = "email"

        -   path: users/querysets.py
            content: |
                from django.db import models
                from typing import Optional, TYPE_CHECKING

                if TYPE_CHECKING:
                    from .models import User

                class UserQuerySet(models.QuerySet["User"]):
                    pass

-   case: reuses_type_when_called_twice_identically
    main: |
        from myapp.models import MyModel, FirstManager, SecondManager
        reveal_type(FirstManager)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(SecondManager)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.first)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(MyModel.second)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                  ...

              FirstManager = BaseManager.from_queryset(ModelQuerySet)
              SecondManager = BaseManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  first = FirstManager()
                  second = SecondManager()

-   case: handles_name_collision_with_generated_type
    main: |
        from myapp.models import MyModel, BaseManagerFromModelQuerySet
        reveal_type(BaseManagerFromModelQuerySet())  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[<nothing>]"
        reveal_type(MyModel.objects)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                  ...

              BaseManagerFromModelQuerySet = BaseManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  objects = BaseManagerFromModelQuerySet()

-   case: accepts_explicit_none_as_class_name
    main: |
        from myapp.models import PositionalNone, NoneAsKwarg
        reveal_type(PositionalNone)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[Any]]"
        reveal_type(NoneAsKwarg)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[Any]]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet):
                  ...

              PositionalNone = BaseManager.from_queryset(ModelQuerySet, None)
              NoneAsKwarg = BaseManager.from_queryset(ModelQuerySet, class_name=None)

-   case: uses_fallback_class_name_when_argument_is_not_string_expression
    main: |
        from myapp.models import StrCallable
        reveal_type(StrCallable)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[Any]]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet):
                  ...

              StrCallable = BaseManager.from_queryset(ModelQuerySet, class_name=str(1))

-   case: emits_error_when_mismatching_manager_and_queryset_model_args
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseModelManagerFromModelQuerySet[Any]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromModelQuerySet[Any]"
    out: |
        myapp/models:13: error: Manager model argument does not match queryset model argument
        myapp/models:14: error: Manager model argument does not match queryset model argument
        myapp/models:16: error: Manager model argument does not match model it is assigned to
        myapp/models:17: error: Manager model argument does not match model it is assigned to
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                  ...

              class BaseModelManager(BaseManager["OtherModel"]):
                  ...

              class ManagerModelManager(models.Manager["OtherModel"]):
                  ...

              FromBaseManager = BaseModelManager.from_queryset(ModelQuerySet)
              FromManager = ManagerModelManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()

              class OtherModel(models.Model):
                  ...

-   case: populates_model_arg_from_manager_when_missing_on_queryset
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet):
                  ...

              class BaseModelManager(BaseManager["MyModel"]):
                  ...

              class ManagerModelManager(models.Manager["MyModel"]):
                  ...

              FromBaseManager = BaseModelManager.from_queryset(ModelQuerySet)
              FromManager = ManagerModelManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()

-   case: populates_model_arg_from_queryset_when_missing_on_manager
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                  ...

              class BaseModelManager(BaseManager):
                  ...

              class ManagerModelManager(models.Manager):
                  ...

              FromBaseManager = BaseModelManager.from_queryset(ModelQuerySet)
              FromManager = ManagerModelManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()

-   case: populates_model_arg_from_queryset_when_manager_base_is_django_builtin_manager
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                  ...

              FromBaseManager = BaseManager.from_queryset(ModelQuerySet)
              FromManager = models.Manager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()

-   case: populates_model_arg_from_manager_when_queryset_is_django_builtin
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseModelManagerFromQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models import QuerySet
              from django.db.models.manager import BaseManager

              class BaseModelManager(BaseManager["MyModel"]):
                  ...

              class ManagerModelManager(models.Manager["MyModel"]):
                  ...

              FromBaseManager = BaseModelManager.from_queryset(QuerySet)
              FromManager = ManagerModelManager.from_queryset(QuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()

-   case: populates_model_arg_as_any_when_no_args_specified
    main: |
        from myapp.models import FromCustomBaseManager, FromCustomManager, FromBaseManager, FromManager, MyModel
        reveal_type(FromCustomBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.custom_base)  # N: Revealed type is "myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromCustomManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.custom_manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerFromModelQuerySet[Any]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models import QuerySet
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet):
                ...

              class BaseModelManager(BaseManager):
                  ...

              class ManagerModelManager(models.Manager):
                  ...

              FromCustomBaseManager = BaseModelManager.from_queryset(ModelQuerySet)
              FromCustomManager = ManagerModelManager.from_queryset(ModelQuerySet)
              FromBaseManager = BaseManager.from_queryset(ModelQuerySet)
              FromManager = models.Manager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  custom_base = FromCustomBaseManager()
                  custom_manager = FromCustomManager()
                  base = FromBaseManager()
                  manager = FromManager()

-   case: populates_model_arg_when_same_for_manager_and_queryset
    main: |
        from myapp.models import FromBaseManager, FromManager, MyModel
        reveal_type(FromBaseManager)  # N: Revealed type is "Type[myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.base)  # N: Revealed type is "myapp.models.BaseModelManagerFromModelQuerySet[myapp.models.MyModel]"
        reveal_type(FromManager)  # N: Revealed type is "Type[myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]]"
        reveal_type(MyModel.manager)  # N: Revealed type is "myapp.models.ManagerModelManagerFromModelQuerySet[myapp.models.MyModel]"
    installed_apps:
        - myapp
    files:
        - path: myapp/__init__.py
        - path: myapp/models.py
          content: |
              from django.db import models
              from django.db.models import QuerySet
              from django.db.models.manager import BaseManager

              class ModelQuerySet(models.QuerySet["MyModel"]):
                ...

              class BaseModelManager(BaseManager["MyModel"]):
                  ...

              class ManagerModelManager(models.Manager["MyModel"]):
                  ...

              FromBaseManager = BaseModelManager.from_queryset(ModelQuerySet)
              FromManager = ManagerModelManager.from_queryset(ModelQuerySet)
              class MyModel(models.Model):
                  base = FromBaseManager()
                  manager = FromManager()
